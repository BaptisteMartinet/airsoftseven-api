type Query {
  session: Session
  events(latitude: Float!, longitude: Float!, distance: Int!, offset: Int, limit: Int, order: [EventOrderBy!], filters: EventFilters): EventOffsetConnection!
  event(slug: String!): Event!
  clubs(offset: Int, limit: Int, order: [ClubOrderBy!], filters: ClubFilters): ClubOffsetConnection!
  club(slug: String!): Club!
  fields(offset: Int, limit: Int, order: [FieldOrderBy!], filters: FieldFilters): FieldOffsetConnection!
  field(slug: String!): Field!
  user(slug: String!): User!
}

type Session {
  id: ID!
  createdAt: Date!
  updatedAt: Date!
  expireAt: Date!
  user: User
}

"""Date custom scalar type"""
scalar Date

type User {
  id: ID!
  createdAt: Date!
  updatedAt: Date!
  username: String!
  slugBase: String!
  slug: String!
  clubs(offset: Int, limit: Int, order: [ClubOrderBy!], filters: ClubFilters): ClubOffsetConnection!
  fields(offset: Int, limit: Int, order: [FieldOrderBy!], filters: FieldFilters): FieldOffsetConnection!
  events(offset: Int, limit: Int, order: [EventOrderBy!], filters: EventFilters): EventOffsetConnection!
  reports(offset: Int, limit: Int, order: [ReportOrderBy!], filters: ReportFilters): ReportOffsetConnection!
  reported: Boolean
}

type ClubOffsetConnection {
  nodes: [Club!]
  count: Int!
}

type Club {
  id: ID!
  createdAt: Date!
  updatedAt: Date!
  name: String!
  description: String
  publicURL: String
  rules: String
  rentals: Boolean
  acceptUnderage: Boolean
  slugBase: String!
  slug: String!
  author: User
  events(offset: Int, limit: Int, order: [EventOrderBy!], filters: EventFilters): EventOffsetConnection!
  reported: Boolean
}

type EventOffsetConnection {
  nodes: [Event!]
  count: Int!
}

type Event {
  id: ID!
  createdAt: Date!
  updatedAt: Date!
  title: String!
  description: String
  date: Date!
  durationDays: Int!
  price: Float
  capacity: Int
  publicURL: String
  slugBase: String!
  slug: String!
  author: User
  club: Club
  field: Field
  reported: Boolean
}

type Field {
  id: ID!
  createdAt: Date!
  updatedAt: Date!
  name: String!
  description: String
  address: String!
  latitude: Float!
  longitude: Float!
  publicURL: String
  slugBase: String!
  slug: String!
  author: User
  events(offset: Int, limit: Int, order: [EventOrderBy!], filters: EventFilters): EventOffsetConnection!
  playgroundTypes(offset: Int, limit: Int, order: [FieldPlaygroundTypeOrderBy!], filters: FieldPlaygroundTypeFilters): FieldPlaygroundTypeOffsetConnection!
  reported: Boolean
}

input EventOrderBy {
  field: EventFields!
  ordering: OrderType!
}

enum EventFields {
  title
  description
  date
  durationDays
  price
  capacity
  publicURL
  slugBase
  slug
  createdAt
  updatedAt
}

enum OrderType {
  ASC
  DESC
}

"""The Event model filters"""
input EventFilters {
  title: StringFilters
  description: StringFilters
  date: DateFilters
  durationDays: IntFilters
  price: FloatFilters
  capacity: IntFilters
  publicURL: StringFilters
  slugBase: StringFilters
  slug: StringFilters
}

input StringFilters {
  """Equal"""
  eq: String

  """Not equal"""
  ne: String

  """In"""
  in: [String!]

  """Not in"""
  notIn: [String!]

  """Contains substring"""
  contains: String

  """Starts with substring"""
  startsWith: String

  """Ends with substring"""
  endsWith: String
}

input DateFilters {
  """Equal"""
  eq: Date

  """Not equal"""
  ne: Date

  """In"""
  in: [Date!]

  """Not in"""
  notIn: [Date!]

  """Less than"""
  lt: Date

  """Less than or equal"""
  lte: Date

  """Greater than"""
  gt: Date

  """Greater than or equal"""
  gte: Date
}

input IntFilters {
  """Equal"""
  eq: Int

  """Not equal"""
  ne: Int

  """In"""
  in: [Int!]

  """Not in"""
  notIn: [Int!]

  """Less than"""
  lt: Int

  """Less than or equal"""
  lte: Int

  """Greater than"""
  gt: Int

  """Greater than or equal"""
  gte: Int
}

input FloatFilters {
  """Equal"""
  eq: Float

  """Not equal"""
  ne: Float

  """In"""
  in: [Float!]

  """Not in"""
  notIn: [Float!]

  """Less than"""
  lt: Float

  """Less than or equal"""
  lte: Float

  """Greater than"""
  gt: Float

  """Greater than or equal"""
  gte: Float
}

type FieldPlaygroundTypeOffsetConnection {
  nodes: [FieldPlaygroundType!]
  count: Int!
}

type FieldPlaygroundType {
  id: ID!
  createdAt: Date!
  updatedAt: Date!
  type: PlaygroundType!
}

enum PlaygroundType {
  CQB
  Forest
  Buildings
  Speedsoft
}

input FieldPlaygroundTypeOrderBy {
  field: FieldPlaygroundTypeFields!
  ordering: OrderType!
}

enum FieldPlaygroundTypeFields {
  type
  createdAt
  updatedAt
}

"""The FieldPlaygroundType model filters"""
input FieldPlaygroundTypeFilters {
  type: PlaygroundTypeFilters
}

input PlaygroundTypeFilters {
  """Equal"""
  eq: PlaygroundType

  """Not equal"""
  ne: PlaygroundType

  """In"""
  in: [PlaygroundType!]

  """Not in"""
  notIn: [PlaygroundType!]
}

input ClubOrderBy {
  field: ClubFields!
  ordering: OrderType!
}

enum ClubFields {
  name
  description
  publicURL
  rules
  rentals
  acceptUnderage
  slugBase
  slug
  createdAt
  updatedAt
}

"""The Club model filters"""
input ClubFilters {
  name: StringFilters
  description: StringFilters
  publicURL: StringFilters
  rules: StringFilters
  rentals: BooleanFilters
  acceptUnderage: BooleanFilters
  slugBase: StringFilters
  slug: StringFilters
}

input BooleanFilters {
  """Equal"""
  eq: Boolean

  """Not equal"""
  ne: Boolean

  """In"""
  in: [Boolean!]

  """Not in"""
  notIn: [Boolean!]
}

type FieldOffsetConnection {
  nodes: [Field!]
  count: Int!
}

input FieldOrderBy {
  field: FieldFields!
  ordering: OrderType!
}

enum FieldFields {
  name
  description
  address
  latitude
  longitude
  publicURL
  slugBase
  slug
  createdAt
  updatedAt
}

"""The Field model filters"""
input FieldFilters {
  name: StringFilters
  description: StringFilters
  address: StringFilters
  latitude: FloatFilters
  longitude: FloatFilters
  publicURL: StringFilters
  slugBase: StringFilters
  slug: StringFilters
}

type ReportOffsetConnection {
  nodes: [Report!]
  count: Int!
}

type Report {
  id: ID!
  createdAt: Date!
  updatedAt: Date!
  reason: ReportReason!
  message: String
  user: User
}

enum ReportReason {
  Duplicate
  Offensive
  Other
}

input ReportOrderBy {
  field: ReportFields!
  ordering: OrderType!
}

enum ReportFields {
  reason
  message
  createdAt
  updatedAt
}

"""The Report model filters"""
input ReportFilters {
  reason: ReportReasonFilters
  message: StringFilters
}

input ReportReasonFilters {
  """Equal"""
  eq: ReportReason

  """Not equal"""
  ne: ReportReason

  """In"""
  in: [ReportReason!]

  """Not in"""
  notIn: [ReportReason!]
}

type Mutation {
  session: SessionMutation!
  club: ClubMutation!
  field: FieldMutation!
  event: EventMutation!
  report: ReportMutation!
  user: UserMutation!
}

type SessionMutation {
  verifyEmail(email: String!): Boolean!
  register(code: String!, username: String!, email: String!, password: String!, newsletterOptIn: Boolean): Session!
  login(email: String!, password: String!): Session!
  logout: Boolean!
}

type ClubMutation {
  create(input: ClubCreateInput!): Club!
  delete(id: ID!): Boolean!
}

input ClubCreateInput {
  name: String!
  description: String
  publicURL: String
  rules: String
  rentals: Boolean
  acceptUnderage: Boolean
}

type FieldMutation {
  create(input: FieldCreateInput!): Field!
  delete(id: ID!): Boolean!
}

input FieldCreateInput {
  name: String!
  description: String
  address: String!
  latitude: Float!
  longitude: Float!
  publicURL: String
  playgroundTypes: [PlaygroundType!]
}

type EventMutation {
  create(input: EventCreateInput!): Event!
  delete(id: ID!): Boolean!
}

input EventCreateInput {
  title: String!
  description: String
  date: Date!
  durationDays: Int
  price: Float
  capacity: Int
  publicURL: String
  clubId: ID!
  fieldId: ID!
}

type ReportMutation {
  create(input: ReportCreateInput!): Report!
}

input ReportCreateInput {
  resourceId: ID!
  resourceType: ReportableResource!
  reason: ReportReason!
  message: String
}

enum ReportableResource {
  User
  Club
  Field
  Event
}

type UserMutation {
  ban(id: ID!): User
}